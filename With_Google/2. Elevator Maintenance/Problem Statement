********************************************************************************
REQUIREMENTS
**********************************************
 - Python 2.7.13 sandbox
 - All tests performed run by calling the solution() function.
 - Standard libraries - SUPPORTED
 - Libraries - NOT SUPPORTED
     - bz2              - pyexpat
     - crypt            - select
     - fcntl            - signal
     - mmap             - termios
     - pwd              - thread
     - time             - unicodedata
     - zipimport        - zlib
************************************************
 - Input/output operations - NOT SUPPORTED
 - Solution < 32,000 char (including /nl and ws)
********************************************************************************
********************************************************************************
You've been assigned the onerous task of elevator maintenance -- ugh!
It wouldn't be so bad, except that all the elevator documentation has
been lying in a disorganized pile at the bottom of a filing cabinet
for years, and you don't even know what elevator VERSION NUMBERS
you'll be working on.

Elevator VERSIONS are represented by a series of numbers, divided up
into MAJOR, MINOR + REVISION integers.
P-0
 - New VERSIONS -  increase MAJOR number, e.g. 1, 2, 3, and so on.
 - New features - append second num (MINOR), e.g. 1.0, 1.1, 1.2, etc.
 - Small PATCHES - append third num named (REVISION), e.g. 1.1.1, 1.1.2, 1.2.0)
 - Pre-Release - Zero can be used as MAJOR (beta), e.g. 0.1, 0.5, 0.9.2, etc
********************************************************************************
********************************************************************************
Given a LIST of elevator VERSIONS (represented as STRINGS):
- Write a function (solution(l)) that:
   - Returns the same LIST {{{SORTED IN ASCENDING ORDER}}}
        - By MAJOR, MINOR + REVISION number
*********************************************************
NOTES:
- The versions in list [l] will always contain MAJOR numbers.
- The versions in list [l] have optional MINOR + REVISION.
- If the version contains a REVISION num, then it will also have a MINOR num.
- If VERSIONS are equivalent but one VERSION contains more values (length):
     - Sort ascending by length, e.g ["1", "1.0", "1.0.0"].
- Length of list [l] will be at least 1 and will not exceed 100.

For example, given the list [l] as ["1.1.2", "1.0", "1.3.3", "1.0.12", "1.0.2"]:
The function (solution(l)) would return the list as:
    ["1.0", "1.0.2", "1.0.12", "1.1.2", "1.3.3"].
********************************************************************************
********************************************************************************
-- Python cases --
Input:
solution.solution(["1.11", "2.0.0", "1.2", "2", "0.1", "1.2.1", "1.1.1", "2.0"])
Output:
    0.1,1.1.1,1.2,1.2.1,1.11,2,2.0,2.0.0

Input:
solution.solution(["1.1.2", "1.0", "1.3.3", "1.0.12", "1.0.2"])
Output:
    1.0,1.0.2,1.0.12,1.1.2,1.3.3
