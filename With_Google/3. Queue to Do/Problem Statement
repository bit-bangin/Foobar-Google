================================================================================
REQUIREMENTS
================================================
 - Python 2.7.13 sandbox
 - All tests performed run by calling the solution() function.
 - Standard libraries - SUPPORTED
 - Libraries - NOT SUPPORTED
     - bz2              - pyexpat
     - crypt            - select
     - fcntl            - signal
     - mmap             - termios
     - pwd              - thread
     - time             - unicodedata
     - zipimport        - zlib
================================================
================================================
 - Input/output operations - NOT SUPPORTED
 - Solution < 32,000 char (including /nl and ws)
================================================================================
================================================================================
You're almost ready to make your move to destroy the LAMBCHOP doomsday device,
but the security checkpoints that guard the underlying systems of the LAMBCHOP
are going to be a problem. You were able to take one down without tripping any
alarms, which is great! Except that as Commander Lambda's assistant, you've
learned that the checkpoints are about to come under automated review, which
means that your sabotage will be discovered and your cover blown -- unless you
can trick the automated review system.

To trick the system, you'll need to write a program to return the same security
checksum that the bunny trainers would have after they would have checked all
the workers through. Fortunately, Commander Lambda's desire for efficiency won't
allow for hours-long lines, so the trainers at the checkpoint have found ways
to quicken the pass-through rate. Instead of checking each and every worker
coming through, the bunny trainers instead go over everyone in line while
noting their worker IDs, then allow the line to fill back up. Once they've done
that they go over the line again, this time leaving off the last worker. They
continue doing this, leaving off one more worker from the line each time but
recording the worker IDs of those they do check, until they skip the entire
line, at which point they XOR the IDs of all the workers they noted into a
checksum and then take off for lunch. Fortunately, the workers' orderly nature
causes them to always line up in numerical order without any gaps.
================================================================================
================================================================================
For example, if the first worker in line has ID 0 and the security checkpoint
line holds three workers, the process would look like this:
0 1 2 /
3 4 / 5
6 / 7 8
(where the trainers' XOR (^) checksum is 0^1^2^3^4^6 == 2)

Likewise, if the first worker has ID 17 and the checkpoint holds four workers,
the process would look like:
17 18 19 20 /
21 22 23 / 24
25 26 / 27 28
29 / 30 31 32
which produces the checksum 17^18^19^20^21^22^23^25^26^29 == 14.
================================================================================
================================================================================
INFORMATION
================================================
- All IDs (including first worker) are between 0 and 2000000000 (inclusive)
- Checkpoint line will always be at least 1 worker long.
- The workers will always line up in numerical order without any gaps.
================================================
XOR == "exclusive or"
        - A connective in logic known as the "exclusive or," or exclusive 
          disjunction.
        - It yields true if exactly one (but not both) of two conditions is true
================================================================================
================================================================================
OBJECTIVES
================================================
With this information, write a function solution(start, length) that will cover
for the missing security checkpoint by outputting the same checksum the trainers
would normally submit before lunch. You have just enough time to find out the ID
of the first worker to be checked (start) and the length of the line (length)
before the automatic review occurs, so your program must generate the proper
checksum with just those two values.
================================================================================
================================================================================
OBJECTIVES
================================================
1.  Write a program to return the same security checksum that the bunny trainers
    would have after they would have checked all the workers through before end.
        - Function: solution(start,lenth)
            - Known values: start, length --- ONLY
2.  Exploit expedited system:
        - Review everyone in line (queue) while noting IDs - then release line.
        - Allow line to fill back up, repeat process
            - Leaving off last worker (placing worker ID in a queue)
            - Once an entire queue has been filled with "Left Off" IDs:
                - XOR all noted IDs into a checksum - end.
================================================================================
================================================================================
Test cases
================================================
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Python cases --
=======================
Input:
solution.solution(0, 3)
Output:
    2

Input:
solution.solution(17, 4)
Output:
    14
