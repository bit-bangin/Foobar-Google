********************************************************************************
********************************************************************************
REQUIREMENTS
**********************************************
 - Python 2.7.13 sandbox
 - All tests performed run by calling the solution() function.
 - Standard libraries - SUPPORTED
 - Libraries - NOT SUPPORTED
     - bz2              - pyexpat
     - crypt            - select
     - fcntl            - signal
     - mmap             - termios
     - pwd              - thread
     - time             - unicodedata
     - zipimport        - zlib
************************************************
 - Input/output operations - NOT SUPPORTED
 - Solution < 32,000 char (including /nl and ws)
********************************************************************************
********************************************************************************
- Function called solution(src, dest)
- Function accepts 2 parameters:
        1. (src) --- source square
        2. (dest) -- desired location
- Return integer value representing fewest moves to traverse (scr)
- Using knight's moves
    - 2 squares (any direction) + 1 square perpindicular (same direction)
- Parameters
    - Integer
    - 0-63 (inclusive)
********************************************************************************
********************************************************************************
As a henchman on Commander Lambda's space station, you're expected to be
resourceful, smart, and a quick thinker. It's not easy building a doomsday
device and ordering the bunnies around at the same time, after all! In order to
make sure that everyone is sufficiently quick-witted, Commander Lambda has
installed new flooring outside the henchman dormitories. It looks like a
chessboard, and every morning and evening you have to solve a new movement
puzzle in order to cross the floor. That would be fine if you got to be the
rook or the queen, but instead, you have to be the knight. Worse, if you take
too much time solving the puzzle, you get "volunteered" as a test subject for
the LAMBCHOP doomsday device!

To help yourself get to and from your bunk every day, write a function called
solution(src, dest) which takes in two parameters: the source square, on which
you start, and the destination square, which is where you need to land to solve
the puzzle.  The function should return an integer representing the smallest
number of moves it will take for you to travel from the source square to the
destination square using a chess knight's moves (that is, two squares in any
direction immediately followed by one square perpendicular to that direction,
or vice versa, in an "L" shape).  Both the source and destination squares will
be an integer between 0 and 63, inclusive, and are numbered like the example
chessboard below:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------
********************************************************************************
********************************************************************************
-- Python cases --
Input:
solution.solution(0, 1)
Output:
    3

Input:
solution.solution(19, 36)
Output:
    1
